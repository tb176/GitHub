// 
package com.mo9.data.cashmere.bean;

// Generated 2015-8-21 14:39:39 by Hibernate Tools 3.2.2.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.BatchSize;

/**
 * TRiskBuyer generated by hbm2java
 */
@Entity
@Table(name = "t_risk_buyer", catalog = "riskdb")
public class RiskBuyer implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7772957755332019076L;
	private long id = 0;
	//private RiskMerchant riskMerchant;
	private String mobile;
	private String identityid;
	private String qq;//用户qq号
	private String email;//用户邮箱地址
	private String address;//用户地址
	private String remark;//备注信息
	private Date createTime;
	private String risklevel;//风险等级
	private String mobileCity;//手机所在城市
	private RiskBuyer recommend;//推荐人
	
	private String salt;//密码hash盐值
    private String password;//密码hash
    @Transient
    private String plainPassword;//明文密码，不入库，只在内存中
	
//	private List<RiskSensitiveWords> riskSensitiveWordses = new ArrayList<RiskSensitiveWords>();
//	private List<RiskBuyerCredit> riskBuyerCredits = new ArrayList<RiskBuyerCredit>();
//	private List<RiskBuyerIdcard> riskBuyerIdcards = new ArrayList<RiskBuyerIdcard>();
//	private List<RiskBuyerWorkInfo> buyerWorkInfos = new ArrayList<RiskBuyerWorkInfo>();
//	private List<RiskBuyerInfo> riskBuyerInfos = new ArrayList<RiskBuyerInfo>();

	public RiskBuyer() {
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "merchant_id")
//	public RiskMerchant getRiskMerchant() {
//		return this.riskMerchant;
//	}
//
//	public void setRiskMerchant(RiskMerchant RiskMerchant) {
//		this.riskMerchant = RiskMerchant;
//	}

	@Column(name = "mobile", length = 20)
	public String getMobile() {
		return this.mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_time", length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "riskBuyer")
//	@BatchSize(size = 10)
//	public List<RiskSensitiveWords> getRiskSensitiveWordses() {
//		return this.riskSensitiveWordses;
//	}
//
//	public void setRiskSensitiveWordses(
//			List<RiskSensitiveWords> RiskSensitiveWordses) {
//		this.riskSensitiveWordses = RiskSensitiveWordses;
//	}
//
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "riskBuyer")
//	@BatchSize(size = 10)
//	public List<RiskBuyerCredit> getRiskBuyerCredits() {
//		return this.riskBuyerCredits;
//	}
//
//	public void setRiskBuyerCredits(List<RiskBuyerCredit> RiskBuyerCredits) {
//		this.riskBuyerCredits = RiskBuyerCredits;
//	}
//	
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "riskBuyer")
//	@BatchSize(size = 10)
//	public List<RiskBuyerIdcard> getRiskBuyerIdcards() {
//		return riskBuyerIdcards;
//	}
//
//	public void setRiskBuyerIdcards(List<RiskBuyerIdcard> riskBuyerIdcards) {
//		this.riskBuyerIdcards = riskBuyerIdcards;
//	}
	@Column(name = "identityid", length = 50)
	public String getIdentityid() {
		return identityid;
	}

	public void setIdentityid(String identityid) {
		this.identityid = identityid;
	}

	@Column(name="qq")
	public String getQq() {
		return qq;
	}

	public void setQq(String qq) {
		this.qq = qq;
	}

	@Column(name="email")
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name="address")
	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "riskBuyer")
//	@BatchSize(size = 10)
//	public List<RiskBuyerWorkInfo> getBuyerWorkInfos() {
//		return buyerWorkInfos;
//	}
//
//	public void setBuyerWorkInfos(List<RiskBuyerWorkInfo> buyerWorkInfos) {
//		this.buyerWorkInfos = buyerWorkInfos;
//	}

	@Column(name="risk_level")
	public String getRisklevel() {
		return risklevel;
	}

	public void setRisklevel(String risklevel) {
		this.risklevel = risklevel;
	}

	@Column(name = "remark", length = 200)
	public String getRemark() {
		return remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	@Column(name = "mobile_city")
	public String getMobileCity() {
		return mobileCity;
	}

	public void setMobileCity(String mobileCity) {
		this.mobileCity = mobileCity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "recommend_id")
	public RiskBuyer getRecommend() {
		return recommend;
	}

	public void setRecommend(RiskBuyer recommend) {
		this.recommend = recommend;
	}

	@Column(name = "salt")
	public String getSalt() {
		return salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	@Column(name = "password")
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Transient
	public String getPlainPassword() {
		return plainPassword;
	}

	public void setPlainPassword(String plainPassword) {
		this.plainPassword = plainPassword;
	}
	

//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "riskBuyer")
//	@BatchSize(size = 10)
//	public List<RiskBuyerInfo> getRiskBuyerInfos() {
//		return riskBuyerInfos;
//	}
//
//	public void setRiskBuyerInfos(List<RiskBuyerInfo> riskBuyerInfos) {
//		this.riskBuyerInfos = riskBuyerInfos;
//	}
	
	
	
}
